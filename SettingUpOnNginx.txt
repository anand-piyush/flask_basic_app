# Will try to configure nginx on windows using fastcgi here just like the same we did when we were hosting using IIS. In linux its simple and can be done using digitalocean link given below
# REF : https://www.nginx.com/blog/maximizing-python-performance-with-nginx-parti-web-serving-and-caching/
# NGINX was developed to solve the C10K problem – that is, to handle more than 10,000 simultaneous connections within a given memory budget. 
# Other web servers need a chunk of memory for each connection, so they run out of physical memory and slow down or crash when thousands of users want to 
# access a site at the same time. NGINX handles each request separately and gracefully scales to many more users. (It’s also excellent for additional 
# purposes, as we’ll describe below.)
# A similar problem i faced, i was using a small 4gb ram server and 1GB HDD space and IIS broke to sustain 1000 simultaneous connections.

# Just like IIS, NGINX doesn’t “know” how to run Python, so it needs a gateway to an environment that does. FastCGI is a widely used interface for PHP, Python, and other languages.

However, a more popular choice for communication between Python and NGINX is the Web Server Gateway Interface (WSGI). WSGI works in multithreaded and multiprocess environments, 
so it scales well across all the deployment options mentioned in this blog post.

WSGI vs FASTCGI
They are two different things. WSGI is a Python specific interface for writing web applications. 
There are wrappers for about any web server protocol to provide the WSGI interface. FastGCI (FCGI) is one of such web server protocols.
 So, WSGI is an abstraction layer, while CGI/FastCGI/mod_python are how the actual web servers talk to the application. 
 Some code has to translate the native interface to WSGI (there is a CGI module in wsgiref, there is uwsgi,flup for FastCGI, etc.).
https://stackoverflow.com/questions/1747266/is-there-a-speed-difference-between-wsgi-and-fcgi
# fastcgi and connect to wsgi but one has to connect to it and hence waitress and uwsgi does the needful 

What is Waitress
Waitress is meant to be a production-quality pure-Python WSGI server with very acceptable performance. It has no dependencies except ones which live in the Python standard library. 
It runs on CPython on Unix and Windows
uwsgi and gunicorn is not supported in windows and hence waitress is a better alternative if one wants to host this in windows using non-iis eg nginx server

what is nginx and reverse proxy
In computer networks, a reverse proxy is a type of proxy server that retrieves resources on behalf of a client from one or more servers. These resources are then returned to the client, appearing as if they originated from the proxy server itself. 
nginx can be configured to server static files or to reverse proxy the request to any upstream server( like apache, uwsgi or apache).
It can also be configured as a load balancer to server requests to multiple upstream servers
NGINX handles the HTTP requests that come in from the internet (ie. the users of your application). Based on how you configure NGINX, it can directly provide the static content (Javascript files, CSS files, images, documents, static HTML files) back to the requester. Additionally, it can reverse proxy the requests to your WSGI (Web Server Gateway Interface) server to allow you to generate the dynamic content (HTML) in your Flask web application to be delivered back to the user.



REF : https://www.digitalocean.com/community/tutorials/how-to-serve-flask-applications-with-uwsgi-and-nginx-on-ubuntu-14-04  ( if uwsgi is used to setup flask on linux)
# For windows we will be using waitress with the same steps as given in the above link (with some changes in config)
https://www.patricksoftwareblog.com/how-to-configure-nginx-for-a-flask-web-application/

Steps:
we here will be using waitress (more details on building whls doc ) (alternate to gunicorn and uwsgi) (wsgi in linux is recommended) (wfastcgi in iis doc we used before) as our translator or our bridge to fastcgi protocol

1. Build project (more on my other doc on Building wheels and deployment)
2. Creating a virtual env. (my other blog can be referred for this )
3. pip install waitress                    # In Linux, recommended to use pip install uwsgi
4. Try running waitress using command        waitress-serve --port=5000 src:run.app
5. Download NGINX http://nginx.org/en/download.html
6. unzip the files and store it in the desired location, You may run the following commands 
  Installation:
        cd c:\
        unzip nginx-1.2.3.zip
        ren nginx-1.2.3 nginx
        cd nginx
        start nginx
    Control:
        nginx -s [ stop | quit | reopen | reload ]
7. By default it starts on a default port 80 (on http). In case you may wish to change this, go to nginx dir and then to conf directory and edit ngix.conf as needed
   FOr port change you may have to add/edit:
    server {
        listen       <new port>;
    }
   You can check if nginx is running fine with command     nginx -t

8. Lets begin configuring webserver using the following    [ REF: https://www.patricksoftwareblog.com/how-to-configure-nginx-for-a-flask-web-application/]
   A. In the main section write these
        #user  nginx;  # if you wish to add users, you can do that with nginx commands, for now this can be left blank. Having users enable authentication as well on nginx
        worker_processes  1;  # for a basic virtual private server 1 is good as it defines the no. of cores, u can increase this if the performance needs to be increased

        #error_log  logs/error.log;
        #error_log  logs/error.log  notice;
        error_log  logs/error.log  info;

        pid        logs/nginx.pid;

    B: Events section
        events {
            worker_connections  1024; # It defines the max number of simultaneous worker connections that can be opened by a worker process.
        }

    C: SET REVERSE PROXY AND UPSTREAM SERVER details (including static files if any)

FINAL CONFIG SHOULD LOOK LIKE THIS
"""""""""""""""""""""""""
# user  nginx;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
error_log  logs/error.log  info;

pid        logs/nginx.pid;


events {
    worker_connections  1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    upstream up-service {
        server DESKTOP-NRUJ95U:5000;
    }
    server {
        listen       5051;   # notice nginx is hosted on 5051
        server_name  localhost;

        charset utf-8;
        location /static {                                                  # static files hosted like this, means /static is now pointing to the dir specified
                alias D:\PythonApps\flask_app_iis\src\views\flasgger;
        }
        

        location / {
                proxy_pass http://up-service/;
	    #       proxy_redirect     http://up-service http://up-service/api;
                proxy_set_header   Host              $host:$server_port/up-service;
                proxy_set_header   X-Real-IP         $remote_addr;
                proxy_set_header   X-Forwarded-For   $proxy_add_x_forwarded_for;
                proxy_set_header   X-Forwarded-Proto $scheme;
 	            proxy_set_header   Referer           $http_referer;
                client_max_body_size 5M;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }


        # HTTPS server
        #
        #server {
        #    listen       443 ssl;
        #    server_name  localhost;

        #    ssl_certificate      cert.pem;
        #    ssl_certificate_key  cert.key;

        #    ssl_session_cache    shared:SSL:1m;
        #    ssl_session_timeout  5m;

        #    ssl_ciphers  HIGH:!aNULL:!MD5;
        #    ssl_prefer_server_ciphers  on;

        #    location / {
        #        root   html;
        #        index  index.html index.htm;
        #    }
        #}

    }
}
""""""""""""""""""""""""""

http://nginx.org/en/docs/http/configuring_https_servers.html


6. once complete start nginx using command     start nginx
7. you can now go to following urls and test
   # swaggger
   http://192.168.0.113:5051/api/doc/
   # normal test page
   http://192.168.0.113:5051/api/

FURTHER REF ON  : https://www.patricksoftwareblog.com/how-to-configure-nginx-for-a-flask-web-application/
https://github.com/noirbizarre/flask-restplus/issues/310
https://github.com/noirbizarre/flask-restplus/issues/223

8. Last part of this is to run on https
    A. Install pyopenssl using pip and run    python getSelfSignedCert.py
    B. Paste the config below in nginx or update the existing fields like this
    
    """"""""""""""""""""""""""" 
    # HTTPS server
	listen       5051 ssl;
	ssl_certificate      D:\PythonApps\flask_app_iis\cert\myapp.crt;
        ssl_certificate_key  D:\PythonApps\flask_app_iis\cert\myapp.key;
	ssl_session_timeout  5m;
    """""""""""""""""""""""""""
    C. Run the following endpoints in browser
    https://localhost:5051/api/doc/    # swagger page # notice the endpoint curl commands in swagger try it out section, its of nginx (reverse proxy => depicting client that nginx server is sending the response/pages)
                                      # /doc may not work as due to swagger url setting of doc/ . This though can be fixed via redirection for doc
    https://localhost:5051/api # test page


9 To stop nginx services,  use command     nginx -s stop     
10. You may also kill waitress-serve if you need
   
HW : END WAITRESS AND CHECK HOW NGINX BEHAVES

FINAL NGINX CONFIG LOOKS LIKE THE ONE BELOW
"""""
# user  nginx;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
error_log  logs/error.log  info;

pid        logs/nginx.pid;


events {
    worker_connections  1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    upstream up-service {
        server DESKTOP-NRUJ95U:5000;
    }
    server {
        server_name  localhost;

        charset utf-8;
        location /static {
                alias D:\PythonApps\flask_app_iis\src\views\flasgger;
        }
        

        location / {
                proxy_pass http://up-service/;
	            # proxy_redirect     http://up-service/ http://up-service/api;
                proxy_set_header   Host              $host:$server_port/up-service;
                proxy_set_header   X-Real-IP         $remote_addr;
                proxy_set_header   X-Forwarded-For   $proxy_add_x_forwarded_for;
                proxy_set_header   X-Forwarded-Proto $scheme;
 		proxy_set_header   Referer           $http_referer;
                client_max_body_size 5M;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

	
        # HTTPS server
	listen       5051 ssl;
	ssl_certificate      D:\PythonApps\flask_app_iis\cert\myapp.crt;
        ssl_certificate_key  D:\PythonApps\flask_app_iis\cert\myapp.key;
	ssl_session_timeout  5m;

        #
        #server {
        #    listen       443 ssl;
        #    server_name  localhost;

        #    ssl_certificate      cert.pem;
        #    ssl_certificate_key  cert.key;

        #    ssl_session_cache    shared:SSL:1m;
        #    ssl_session_timeout  5m;

        #    ssl_ciphers  HIGH:!aNULL:!MD5;
        #    ssl_prefer_server_ciphers  on;

        #    location / {
        #        root   html;
        #        index  index.html index.htm;
        #    }
        #}

    }
}




"""""